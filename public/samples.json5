{
  "games": {
    "mario": {
      "entry": "Mario.fsproj",
      "title": "Super Fable Mario",
      "desc": "Mario clone, based on functional reactive [sample written in Elm](http://debug.elm-lang.org/edit/Mario.elm). The Fable version is using HTML 5 canvas to render the background and an `img` tag showing the Mario (using animated GIFs).",
      "img": "mario.png"
    },
    "ozmo": {
      "entry": "Ozmo.fsproj",
      "title": "Ozmo Game",
      "desc": "Phil Trelford's [classic Ozmo game](https://twitter.com/ptrelford/status/475395178208174080), originally hosted [on BitBucket](https://bitbucket.org/ptrelford/ozmo) ported to Fable! Shows how to handle keyboard events and use HTML5 canvas. You can also get it (as a JavaScript app) from the [Windows Store](https://www.microsoft.com/en-gb/store/apps/ozmo/9nblggh4rjng).",
      "img": "ozmo.png"
    },
    "pacman": {
      "entry": "Pacman.fsproj",
      "title": "Pacman",
      "desc": "Pacman finds himself in a grid filled with monsters... This is the most complex sample here. It involves rendering the maze, AI for the ghosts, user interaction and even playing sound effects. The game has some brief commentary, but if you want to learn Fable, look at the above examples first.",
      "img": "pacman.png"
    },
    "pong": {
      "entry": "Pong.fsproj",
      "title": "Pong",
      "desc": "This Fable version of pong is using HTML 5 canvas to render a whole two player pong game.",
      "img": "pong.png"
    },
    "samegame": {
      "entry": "SameGame.fsproj",
      "title": "SameGame",
      "desc": "This demo shows a Fable implementation of SameGame. The functional implementation of the game follows the type-first design approach and consists of three main components: types, game logic and front end. Contributed by [Leif Battermann](https://twitter.com/leifbattermann).",
      "img": "samegame.png"
    },
    "funsnake": {
      "entry": "Funsnake.fsproj",
      "title": "Funsnake",
      "desc": "Classic snake game that can be played either by keyboard or mouse/touch. Originally developed by [Alberto Ayuso](https://twitter.com/ayuscode) for FunScript.",
      "img": "funsnake.png"
    },
  },
  "pixi": {
    "pixi": {
      "entry": "Pixi.fsproj",
      "title": "Pixi sample",
      "desc": "Simple renderization with [PixiJS](http://www.pixijs.com/), a fast and flexible library to render 2D WebGL content.",
      "img": "pixi.jpeg"
    },
    "pixi/basic": {
      "entry": "PixiBasic.fsproj",
      "title": "Pixi sample",
      "desc": "Simple renderization with [PixiJS](http://www.pixijs.com/), a fast and flexible library to render 2D WebGL content.",
      "img": "pixi.jpeg"
    },
    "pixi/container": {
      "entry": "PixiContainer.fsproj",
      "title": "Pixi sample",
      "desc": "Simple renderization with [PixiJS](http://www.pixijs.com/), a fast and flexible library to render 2D WebGL content.",
      "img": "pixi.jpeg"
    },
  },
  "visual": {
    "d3map": {
      "entry": "D3.Map.fsproj",
      "title": "D3 World Tour",
      "desc": "This demo is a Fable port of [Mike Bostock's World Tour](https://bl.ocks.org/mbostock/4183330) D3 demo. It uses the D3 library to create a visualization that loops through all countries of the world and shows them on the globe one by one.",
      "img": "d3map.png"
    },
    "hokusai": {
      "entry": "Hokusai.fsproj",
      "title": "Hokusai and Fractals",
      "desc": "This demo is based on Tomas Petricek's [F# Advent Calendar post](http://tomasp.net/blog/2014/japan-advent-art-en/) that explores Japanese art using the (now defunct) Freebase type provider and renders The Great Wave by Hokusai using the Julia fractal.",
      "img": "wave.jpg"
    },
    "lsystem": {
      "entry": "LSystem.fsproj",
      "title": "Interactive L-system generator",
      "desc": "This demo is based on [L-system workshop](https://github.com/Andrea/Lsystem) by Andrea Magnorsky and Ross McKinlay. Rather than working on the tasks they gave us, Tomas Petricek compiled it with Fable, so that you can play with it in a browser!",
      "img": "lsystem.png"
    },
    "webgl-terrain": {
      "entry": "WebGL.Terrain.fsproj",
      "title": "WebGL Geometry Terrain",
      "desc": "This demo is a Fable port of the [WebGL Geometry Terrain](http://threejs.org/examples/#webgl_geometry_terrain) three.js demo. It uses the three.js library to randomly generate a 3D terrain which can be navigated in a first-person view. The code was originally written by [John Quigley](https://github.com/jmquigs) for FunScript.",
      "img": "webGLTerrain.png"
    },
    "mandelbrot": {
      "entry": "Mandelbrot.fsproj",
      "title": "Mandelbrot Fractal",
      "desc": "Generate fractals with HTML5 canvas.",
      "img": "mandelbrot.png"
    },
  },
  "productivity": {
    "redux-todomvc": {
      "entry": "Redux.TodoMVC.fsproj",
      "title": "React + Redux TodoMVC",
      "desc": "This is a port of [Redux TodoMVC](https://github.com/reactjs/redux/tree/master/examples/todomvc) and shows how easy is to create a Fable web app only using JS libraries. [Redux](http://redux.js.org/) is a predictable state container for JavaScript apps, easy to use and compatible with functional patterns.",
      // "Redux greatly improves your development experience with extensions like Redux DevTools allowing for live code editing combined with a time traveling debugger."
      "img": "redux.png"
    },
    "vue-todomvc": {
      "entry": "Vue.TodoMVC.fsproj",
      "title": "Vue TodoMVC",
      "desc": "Shows how to create a TODO list using [Vue.js](http://vuejs.org/). Unlike React, Vue relies on a template language separated from logic code and closer to HTML. Please note this is an early experiment so the code may not look as idiomatic F#.",
      "img": "vue.png"
    }
  }
}